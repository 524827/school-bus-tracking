{"version":3,"sources":["./src/app/pages/login/coordinator/bus-route/bus-route.component.html","./src/app/pages/login/coordinator/bus-route/bus-route.component.scss","./src/app/pages/login/coordinator/bus-route/bus-route.component.ts","./src/app/pages/login/coordinator/bus-route/bus-route.module.ts","./src/app/services/livemap.service.ts"],"names":[],"mappings":"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","file":"coordinator-bus-route-bus-route-module.js","sourcesContent":["export default \"<ion-card>\\n  <ion-card-content id=\\\"map\\\"></ion-card-content>\\n</ion-card>\"","export default \"#map {\\n  width: 100%;\\n  height: 500px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL25hbWRldi9EZXNrdG9wL2dpdCAvd2hlcmUgaXMgbXkgYnVzL3NyYy9hcHAvcGFnZXMvbG9naW4vY29vcmRpbmF0b3IvYnVzLXJvdXRlL2J1cy1yb3V0ZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvbG9naW4vY29vcmRpbmF0b3IvYnVzLXJvdXRlL2J1cy1yb3V0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQUE7RUFDQSxhQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9sb2dpbi9jb29yZGluYXRvci9idXMtcm91dGUvYnVzLXJvdXRlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDUwMHB4O1xufSIsIiNtYXAge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA1MDBweDtcbn0iXX0= */\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { VehicleService } from '../../../../services/vehicle.service';\nimport { DriverService } from '../../../../services/driver.service';\nimport { LivemapService } from '../../../../services/livemap.service';\nimport { StorageService } from '../../../../services/storage.service';\nimport { from, Observable } from 'rxjs';\nimport { IonItemGroup } from '@ionic/angular';\n\nimport { environment } from '../../../../../environments/environment';\n\ndeclare const google: any;\n@Component({\n  selector: 'app-bus-route',\n  templateUrl: './bus-route.component.html',\n  styleUrls: ['./bus-route.component.scss'],\n})\n\n/**\n * @description - This class initializes multiple buses location on map and sets the new position of buses icon.\n * @class - BusRouteComponent\n */\nexport class BusRouteComponent implements OnInit, OnDestroy {\n  public interval;\n  /**\n   * @member {sring} vehicleImages - - Stores the vehicleImages folder link of server.\n   * @member {sring} driverImages - - Stores the driverImages folder link of server.\n   * @member {any} vehicleData - Stores the vehicle's data fetched from server.\n   * @member {any} driverLogDetails - Stores the driver's log data fetched from server.\n   * @member {Array} markers - Array of markers.\n   * @member {any} map - Stores map data.\n   */\n  vehicleImages: String;\n  driverImages: String;\n  map: any;\n  markers = [];\n  vehicleData: any;\n  driverLogDetails: any;\n\n  /**\n   * @description - This constructor initializes instances ofgeolocation, VehicleService, DriverService, LivemapService.\n   * @constructor\n   * @param {Geolocation} geolocation - Instance of Geolocation.\n   * @param {VehicleService} vehicleService - Instance of VehicleService.\n   * @param {DriverService} driverService - Instance of DriverService.\n   * @param {LivemapService} liveMapService - Instance of LivemapService.\n   */\n  constructor(\n    private geolocation: Geolocation,\n    private vehicleService: VehicleService,\n    private driverService: DriverService,\n    private liveMapService: LivemapService,\n    private storageService: StorageService\n  ) {\n    // Assigning vehicle images folder link of server to vehicleImages member.\n    this.vehicleImages = environment.vehicleImages;\n\n    // Assigning driver images folder link of server to driverImages member.\n    this.driverImages = environment.driverImages;\n\n    // Calling getCurrentLocation method of livemapService using liveMapService instance.\n    this.liveMapService.getCurrentLocation();\n  }\n\n  /**\n   * @description - This function calls vehicle and driver services to fetch data and assiging drivers current location.\n   * @function - getAllVehicleFromServer\n   */\n  async getAllVehicleFromServer() {\n    // Calling getServerVehicleDetails method with getAllVehicleDetails parameter of vehicle service.\n    // Storing the response return from the server in to vehicleDetails.\n    const vehicleDetails = await this.vehicleService.getServerVehicleDetails(\n      'getAllVehicleDetails'\n    );\n\n    // Subscribing the vehicleDetails to get the data.\n    vehicleDetails.subscribe(data => {\n      // Assigning response data to vehicleData member.\n      this.vehicleData = data['data'];\n\n      // Accessing each vehicle details from vehicleData array using map function.\n      this.vehicleData.map(async (item, index) => {\n        // Calling getServerDriverDetailsById method driver service.\n        // Storing the response return from the server in to driverDetails.\n        const driverDetails = await this.driverService.getServerDriverDetailsById(\n          item.driver_details._id\n        );\n\n        // Subscribing the driverDetails to get the data.\n        driverDetails.subscribe(res => {\n          // Assigning response data to value.\n          const value = res['data'];\n\n          // Assigning driver details.\n          this.vehicleData[index].driver_details = value[0];\n\n          // Accessing each driver log details from driverLogDetails array using map function.\n          this.driverLogDetails.map((items, indexes) => {\n            // Comparing  driver id of vehicle data with driver id of driver log.\n            if (item.driver_details._id === items.driver_id) {\n              // Assigning driver's current location when driver id match.\n              item['loc'] =\n                items.driverlog[items.driverlog.length - 1].current_location[\n                  items.driverlog[items.driverlog.length - 1].current_location.length - 1\n                ].curLocation;\n\n              // Assigning location with proper named object key's.\n              item['loc'] = { lat: item['loc'].latitude, lng: item['loc'].longitude };\n\n              // Calling createMapMarker method by passing location and vehicleData as parameter.\n              this.createMapMarker(item.loc, this.vehicleData[index]);\n            }\n          });\n        });\n      });\n    });\n\n    // Calling initMap method by passing latitude and longitude as parameter.\n    this.initMap(19.961722, 73.807921);\n  }\n\n  /*  locateAllBuses() {\n    this.getCurrentLocation();\n  } */\n\n  /**\n   * @description - This function initialize the map with provided latitude and longitude.\n   *  Also this function creates a marker and push it into the markers array.\n   * @function - initMap\n   * @param {number} latitude - Stores latitude.\n   * @param {number} longitude - Stores longitude.\n   */\n  initMap(latitude: number, longitude: number) {\n    // Creating object of latitude and longitude.\n    const point = { lat: latitude, lng: longitude };\n\n    // Creating instance of DirectionsService.\n    const directionsService = new google.maps.DirectionsService();\n\n    // Creating instance of DirectionsRenderer.\n    const directionsDisplay = new google.maps.DirectionsRenderer();\n\n    // Initializing instance of map.\n    this.map = new google.maps.Map(\n      // Passing HTML element to show map.\n      <HTMLInputElement>document.getElementById('map'),\n      // Setting other options.\n      {\n        // Setting zoom level of map.\n        zoom: 10,\n\n        // Setting center point of map.\n        center: point,\n      }\n    );\n\n    // Setting map using directionDisplay instance.\n    directionsDisplay.setMap(this.map);\n  }\n\n  /**\n   * @description - This function creates a marker for map.\n   * @function - createMapMarker\n   * @param {object} place - It stores the object of latitude and longitude to place the marker on map.\n   * @param {any} vehicleData - Stores the vehicle details to show when user click on marker.\n   * @returns - void.\n   */\n  createMapMarker(place: object, vehicleData: any): void {\n    // Assigning bus icon url to busImage.\n    const busImage = {\n      // url: this.vehicleImages + '/bus2.png',\n      url: '../../../../../assets/images/bus2.png',\n    };\n\n    // Creating marker.\n    const marker = new google.maps.Marker({\n      // Assigning map.\n      map: this.map,\n\n      // Setting marker position on map.\n      position: place,\n\n      // Setting marker icon.\n      icon: busImage,\n\n      // Setting animation on marker.\n      animation: google.maps.Animation.DROP,\n\n      // Setting title of marker. Title of the marker is vehicle number.\n      title: vehicleData.vehicle_details.vehicle_number,\n    });\n\n    // Pushing created marker inti markers array.\n    this.markers.push(marker);\n\n    // Setting info window of the marker.\n    const infoWindow = new google.maps.InfoWindow({\n      // Setting content of info window.\n      content:\n        '<ion-card><ion-card-header color=\"primary\" text-center>' +\n        vehicleData.vehicle_details.vehicle_number +\n        '</ion-card-header><ion-card-subtitle text-center color=\"tertiary\">Driver : ' +\n        vehicleData.driver_details.driver_name +\n        '</ion-card-subtitle><ion-card-content>' +\n        ' <img src =\"' +\n        this.driverImages +\n        '/' +\n        vehicleData.driver_details.driver_documents.photo +\n        '\"' +\n        +'\" class=\"mapInfoWindowImage\" style=\"width:25px; height:25px;border-radius:50%;\" />' +\n        '<hr>' +\n        '</ion-card-content></ion-card>',\n    });\n\n    // Adding listener of click event for marker.\n    marker.addListener('click', () => {\n      infoWindow.close(this.map, this.markers);\n      setTimeout(function() {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      }, 1000);\n      setTimeout(function() {\n        marker.setAnimation(google.maps.Animation.none);\n      }, 6000);\n      infoWindow.open(this.map, marker);\n      setTimeout(function() {\n        infoWindow.close(this.map);\n      }, 7000);\n    });\n  }\n\n  /**\n   * @description - This function sets the geo coordinates using geolocation plugin.\n   * @function - getCurrentLocation\n   */\n  getCurrentLocation() {\n    this.geolocation\n      .getCurrentPosition()\n      .then(resp => {\n        // Calling initMap method by passing latitude and longitude as parameter.\n        this.initMap(resp.coords.latitude, resp.coords.longitude);\n      })\n      .catch(error => {\n        console.log('Error getting location', error);\n      });\n  }\n\n  ngOnInit() {\n    this.interval = window.setInterval(\n      () => {\n        // Calling getCurrentLocation method of liveMapService to get current location of driver.\n        this.liveMapService.getCurrentLocation();\n      },\n      // Interval time of 2 seconds\n      5000\n    );\n\n    // Subscribing subject to get updated location data.\n    this.liveMapService.curLocation.subscribe(response => {\n      // Assigning driver log data coming from server to driverLogDetails memebr.\n      this.driverLogDetails = response;\n\n      // Checking for driverLogDetails.\n      if (this.driverLogDetails) {\n        // Visting each marker from markers array using array map function.\n        this.markers.map((markerItem, markerIndex) => {\n          // Visting each driver log details from driverLogDetails array using array map function.\n          this.driverLogDetails.map((logItem, logIndex) => {\n            // Visting each vehicle log details from vehicleData array using array map function.\n            this.vehicleData.map((vehicleItem, vehicleIndex) => {\n              // Compairing driver id of vehicle data with driver id of driver log data.\n              if (vehicleItem.driver_details._id === logItem.driver_id) {\n                // Compairing vehicle number of vehicle data with title of marker.\n                if (vehicleItem.vehicle_details.vehicle_number === markerItem.title) {\n                  // Assigning driver's current location to updatedLocation.\n                  let updatedLocation =\n                    logItem.driverlog[logItem.driverlog.length - 1].current_location[\n                      logItem.driverlog[logItem.driverlog.length - 1].current_location.length - 1\n                    ].curLocation;\n\n                  // Assigning location with proper named object key's.\n                  updatedLocation = {\n                    lat: updatedLocation.latitude,\n                    lng: updatedLocation.longitude,\n                  };\n\n                  // Setting the new updated position/location of marker.\n                  this.markers[markerIndex].setPosition(\n                    new google.maps.LatLng(updatedLocation.lat, updatedLocation.lng)\n                  );\n                }\n              }\n            });\n          });\n        });\n      }\n    });\n    //   this.locateAllBuses();\n\n    // Calling getAllVehicleFromServer method.\n    this.getAllVehicleFromServer();\n    this.storageService.setIntervalValue(this.interval);\n  }\n  ngOnDestroy() {\n    if (this.interval) {\n      window.clearInterval(this.interval);\n    }\n  }\n}\n","import { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BusRouteComponent } from './bus-route.component';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild([\n      {\n        // Route for buses-route compomnent.\n        path: '',\n        component: BusRouteComponent,\n      },\n    ]),\n  ],\n  declarations: [BusRouteComponent],\n})\nexport class BusRouteComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NativeGeocoder, NativeGeocoderResult } from '@ionic-native/native-geocoder/ngx';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { CurrentLocation } from '../model/curLocation';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LivemapService {\n  public curLocation: BehaviorSubject<object> = new BehaviorSubject(null);\n  private response = {};\n\n  constructor(private nativeGeocoder: NativeGeocoder, private http: HttpClient) { }\n\n  public coordinates: CurrentLocation;\n  getCurrentLatLong(address: string) {\n    this.nativeGeocoder\n      .forwardGeocode(address)\n      .then((coordinates: NativeGeocoderResult[]) => {\n        this.coordinates = {\n          latitude: parseFloat(coordinates[0].latitude),\n          longitude: parseFloat(coordinates[0].longitude),\n        };\n      })\n      .catch((error: any) => console.log(error));\n    return this.coordinates;\n  }\n\n  async getCurrentLocation() {\n    const headers = new HttpHeaders();\n    headers.append('Content-type', 'application/json');\n    this.http.get(environment.busCoordinatorUrl + '/currentLocation').subscribe(async res => {\n      console.log(' : ', res);\n      this.response = res['data'];\n      console.log(this.response);\n      await this.curLocation.next(this.response);\n    });\n  }\n}\n"],"sourceRoot":"webpack:///"}